package ssh_compose

import (
	"os"

	"github.com/Foxcapades/Argonaut"
	"github.com/Foxcapades/Argonaut/pkg/argo"

	"vpdb-dev-tool/internal/tools/ssh_compose/hosts"
)

const usage = "Generates a docker-compose configuration file and required " +
	"environment variables to access target hosts by tunneling through a " +
	"configured server via SSH.\n\n" +
	"WARNING: It is strongly advised that users review all relevant security " +
	"policies before instantiation or use of any of the containers defined in " +
	"the docker-compose config generated by this tool to ensure that the " +
	"intended use of the tunnels established by the defined containers is not " +
	"in violation of any security policy or policies."

const imageFlagDocs = "Specifies an alternative docker image to use for the SSH tunnel containers."

const genFlagDocs = "Generates an example host-list yaml file."

const hostListDocs = "YAML file providing mapping of hosts to dependent docker " +
	"compose service names.  An example may be generated via the --gen-example " +
	"flag."

func Init(tree argo.CommandTreeBuilder) {
	var hostsFile string
	var image string

	tree.WithLeaf(cli.Leaf("ssh-compose").
		WithDescription(usage).
		WithFlag(cli.ComboFlag('i', "image").
			WithDescription(imageFlagDocs).
			WithBindingAndDefault(&image, dockerImage, true)).
		WithFlag(cli.LongFlag("gen-example").
			WithDescription(genFlagDocs).
			WithCallback(func(argo.Flag) {
				hosts.MakeHostsList()
				os.Exit(0)
			})).
		WithArgument(cli.Argument().
			WithName("hosts-list").
			WithDescription(hostListDocs).
			WithBinding(&hostsFile).
			Require()).
		WithCallback(func(argo.CommandLeaf) { main(hostsFile, image) }))
}
