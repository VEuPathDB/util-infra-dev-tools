package main

import (
	"fmt"
	"log"
	"os"
	"path"

	"ssh-compose/internal/hosts"
	"ssh-compose/internal/project"
	"ssh-compose/internal/tunnel"
)

const (
	Version   = "dev"
	BuildDate = "none"
)

func main() {
	hostListFile := parseArgs()
	hostList := hosts.ReadHostsFile(hostListFile)
	if len(hostList) == 0 {
		log.Fatalln("input contained no valid host entries")
	}

	tunnelConfigs := tunnel.BuildTunnelConfigs(tunnel.Config{
		ComposeVersion: "3.5",
		DockerImage:    "kroniak/ssh-client:3.19",
		Entries:        hostList,
	})

	project.WriteOutConfigs(tunnelConfigs, hostListFile)
}

func parseArgs() (hostsFilePath string) {
	for _, arg := range os.Args[1:] {
		if arg == "-V" {
			fmt.Printf("Version %s, Build Date %s\n", Version, BuildDate)

			os.Exit(0)
		}

		if arg == "-h" || arg == "--help" {
			cmdName := path.Base(os.Args[0])

			fmt.Println("Usage:")
			fmt.Printf("    %s <HOSTS_YAML_FILE>\n", cmdName)
			fmt.Println()
			fmt.Println("  Generates a docker-compose configuration file and required environment")
			fmt.Println("  variables to access target hosts by tunneling through a configured server via")
			fmt.Println("  SSH.")
			fmt.Println()
			fmt.Println("  WARNING: It is strongly advised that users review all relevant security")
			fmt.Println("  policies before instantiation or use of any of the containers defined in the")
			fmt.Println("  docker-compose config generated by this tool to ensure that the intended use")
			fmt.Println("  of the tunnels established by the defined containers is not in violation of")
			fmt.Println("  any security policy or policies.")
			fmt.Println()

			os.Exit(0)
		}

		if info, err := os.Stat(arg); err != nil {
			if os.IsNotExist(err) {
				log.Fatalf("target host list file %s does not exist\n", arg)
			}
			log.Fatalf("encountered error while attempting to stat file %s: %s\n", arg, err)
		} else {
			if info.IsDir() {
				log.Fatalf("given path %s points to a directory\n", arg)
			}
			return arg
		}
	}

	log.Fatalf("no host list file path provided")
	return ""
}
